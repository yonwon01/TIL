#container_vs_VM

* ### VM이란?
  VM은 기본적으로 컴퓨터의 에뮬레이션으로, 프로그램을 실제 컴퓨터처럼 실행한다. VM들은 “하이퍼바이저”를 통해 물리적 기계(machine) 위에서 돌아간다.
* ### 하이퍼바이저란?
  VM이 실행되는 소프트웨어나 펌웨어, 혹은 하드웨어를 뜻한다. 하이퍼바이저들은 호스트 머신이라 불리는 물리적 기계 위에서 돌아가고, 호스트 머신은 VM에 램과 CPU 등의 자원을 제공한다. 즉, 하이퍼바이저는 VM들이 각자 자신의 가상 운영체제, 즉 게스트 운영체제를 실행하고 관리할 수 있게끔 돕는 중요한 역할과 더불어, 호스트 머신들이 자원들을 VM들에게 분배할 수 있도록 도와주는 일을 한다.

     *  **하이퍼바이저 종류**
     1. hosted 하이퍼바이저 : 호스트를 가진 하이퍼바이저는 호스트 머신의 운영체제 위에서 돌아간다. 예를 들어, OSX가 돌아가고 있는 컴퓨터의 VM(VirtualBox나 VMware Workstation 8 등)이 이것의 예시이다. VM은 직접 하드웨어에 접근할 수 없으며, 호스트 OS를 거쳐야 한다(위 예시의 경우에는 맥의 OSX).
     2.  bare-metal 하이퍼바이저 : 직접 하드웨어와 접촉하기 때문에 따로 호스트 OS가 필요없다. 자신만의 디바이스 드라이버를 가지고 입출력, 프로세싱, OS 관련 컴포넌트들과 직접 교류하여 처리한다. 이렇게 해서 더 나은 퍼포먼스, 확장성, 그리고 안정성을 가지게 된다. 

![vm_image](https://user-images.githubusercontent.com/30580971/51083440-c0780800-175d-11e9-89ce-ac652ba45824.png)

* ### Container 란?
  컨테이너는 유저 공간(user spcae)의 추상화를 통해 운영체제 레벨의 가상화를 제공한다. 즉 컨테이너는 유저 공간만을 포함하고, VM에는 포함되는 커널이나 버추얼 하드웨어가 포함되지 않는다.

![container_image](https://user-images.githubusercontent.com/30580971/51083609-7f352780-1760-11e9-88fa-85a526b0b046.png)
     


  * Container 장점
    1) 빠른속도 : 하나의 VM이 실행되기 위해선 OS를 부팅해야 하는 것과 같지만, 컨테이너는 이미 실행된 OS에서 프로그램을 실행하는것과 같다.
    2) 더이상 로컬에서 돌릴 필요 없다.
    3) 모듈성, 확장성 : 서비스 단위의 컨테이너를 구성가능(각각의 컨테이너에서 node.js 단위의 프로그램, redis 서버,,등 다향한 구성이 가능) 각각의 컨테이너간에 연결을 통해 확장된 서비스를 제공 가능하다.




